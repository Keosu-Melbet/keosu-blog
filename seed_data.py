#!/usr/bin/env python3
"""
Kh·ªüi t·∫°o d·ªØ li·ªáu m·∫´u cho website K√®o S∆∞
"""

import os
import sys
from datetime import datetime, timedelta
import random

# Th√™m th∆∞ m·ª•c hi·ªán t·∫°i v√†o sys.path
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from app import app, db
from models import Category, Article, BettingOdd, Match

def create_sample_articles():
    """T·∫°o b√†i vi·∫øt m·∫´u"""
    categories = {
        'keo-thom': Category.query.filter_by(slug='keo-thom').first(),
        'soi-keo': Category.query.filter_by(slug='soi-keo').first(),
        'meo-cuoc': Category.query.filter_by(slug='meo-cuoc').first(),
        'tin-tuc': Category.query.filter_by(slug='tin-tuc').first()
    }

    sample_articles = [
        {
            'title': 'K√®o th∆°m h√¥m nay: Manchester United vs Arsenal - C∆° h·ªôi v√†ng cho Qu·ª∑ ƒë·ªè',
            'slug': 'keo-thom-man-united-vs-arsenal-co-hoi-vang',
            'excerpt': 'Ph√¢n t√≠ch chi ti·∫øt tr·∫≠n Manchester United vs Arsenal v·ªõi nh·ªØng k√®o th∆°m h·∫•p d·∫´n cho ng∆∞·ªùi ch∆°i.',
            'category_id': categories['keo-thom'].id if categories['keo-thom'] else 1,
            'featured': True,
            'meta_title': 'K√®o th∆°m Man United vs Arsenal - Ph√¢n t√≠ch chuy√™n s√¢u | K√®o S∆∞',
            'meta_description': 'Ph√¢n t√≠ch k√®o th∆°m tr·∫≠n Manchester United vs Arsenal v·ªõi d·ª± ƒëo√°n t·ª∑ s·ªë ch√≠nh x√°c v√† t·ª∑ l·ªá k√®o h·∫•p d·∫´n.',
            'meta_keywords': 'k√®o th∆°m, manchester united, arsenal, premier league, d·ª± ƒëo√°n t·ª∑ s·ªë',
            'featured_image': 'https://images.unsplash.com/photo-1574629810360-7efbbe195018?w=800',
            'content': '<h2>Ph√¢n t√≠ch tr·∫≠n ƒë·∫•u...</h2>',
        },
        # Th√™m c√°c b√†i vi·∫øt kh√°c t∆∞∆°ng t·ª±...
    ]

    for data in sample_articles:
        if not Article.query.filter_by(slug=data['slug']).first():
            data['views'] = random.randint(100, 500)
            data['created_at'] = datetime.utcnow()
            data['updated_at'] = datetime.utcnow()
            article = Article(**data)
            db.session.add(article)

    try:
        db.session.commit()
        print(f"‚úÖ Created {len(sample_articles)} sample articles")
    except Exception as e:
        db.session.rollback()
        print(f"‚ùå Error creating articles: {e}")

def create_sample_betting_odds():
    """T·∫°o t·ª∑ l·ªá c∆∞·ª£c m·∫´u"""
    today = datetime.now()
    tomorrow = today + timedelta(days=1)

    matches_data = [
        {
            'home_team': 'Manchester United',
            'away_team': 'Arsenal',
            'match_date': today.replace(hour=21, minute=0),
            'league': 'Premier League',
            'home_win': 2.20,
            'draw': 3.40,
            'away_win': 3.10,
            'over_2_5': 1.85,
            'under_2_5': 1.95,
            'handicap': '-0.5',
            'handicap_home': 1.90,
            'handicap_away': 1.90,
            'recommendation': 'Ch·ªß nh√† th·∫Øng',
            'confidence': 4
        },
        # Th√™m c√°c tr·∫≠n kh√°c...
    ]

    for data in matches_data:
        data['match_name'] = f"{data['home_team']} vs {data['away_team']}"
        if not BettingOdd.query.filter_by(
            home_team=data['home_team'],
            away_team=data['away_team'],
            match_date=data['match_date']
        ).first():
            data['created_at'] = datetime.utcnow()
            odd = BettingOdd(**data)
            db.session.add(odd)

    try:
        db.session.commit()
        print(f"‚úÖ Created {len(matches_data)} betting odds")
    except Exception as e:
        db.session.rollback()
        print(f"‚ùå Error creating betting odds: {e}")

def create_sample_matches():
    """T·∫°o l·ªãch thi ƒë·∫•u m·∫´u"""
    today = datetime.now()
    schedule = []

    for i in range(7):
        date = today + timedelta(days=i)
        schedule.extend([
            {
                'home_team': 'Manchester City',
                'away_team': 'Tottenham',
                'match_date': date.replace(hour=20),
                'league': 'Premier League',
                'venue': 'Etihad Stadium',
                'status': 'scheduled'
            },
            {
                'home_team': 'PSG',
                'away_team': 'Lyon',
                'match_date': date.replace(hour=22),
                'league': 'Ligue 1',
                'venue': 'Parc des Princes',
                'status': 'scheduled'
            }
        ])

    schedule.extend([
        {
            'home_team': 'Arsenal',
            'away_team': 'Chelsea',
            'match_date': today - timedelta(days=1),
            'league': 'Premier League',
            'venue': 'Emirates Stadium',
            'status': 'finished',
            'home_score': 2,
            'away_score': 1
        },
        {
            'home_team': 'Real Madrid',
            'away_team': 'Atletico Madrid',
            'match_date': today - timedelta(days=2),
            'league': 'La Liga',
            'venue': 'Bernabeu',
            'status': 'finished',
            'home_score': 3,
            'away_score': 1
        }
    ])

    for data in schedule:
        if not Match.query.filter_by(
            home_team=data['home_team'],
            away_team=data['away_team'],
            match_date=data['match_date']
        ).first():
            data['created_at'] = datetime.utcnow()
            match = Match(**data)
            db.session.add(match)

    try:
        db.session.commit()
        print(f"‚úÖ Created {len(schedule)} match schedules")
    except Exception as e:
        db.session.rollback()
        print(f"‚ùå Error creating matches: {e}")

def initialize_sample_data():
    """Kh·ªüi t·∫°o to√†n b·ªô d·ªØ li·ªáu m·∫´u"""
    create_sample_articles()
    create_sample_betting_odds()
    create_sample_matches()

def main():
    print("üöÄ ƒêang kh·ªüi t·∫°o d·ªØ li·ªáu m·∫´u cho K√®o S∆∞...")
    with app.app_context():
        initialize_sample_data()
        print("\nüìä T·ªïng k·∫øt d·ªØ li·ªáu:")
        print(f"   ‚Ä¢ Categories: {Category.query.count()}")
        print(f"   ‚Ä¢ Articles: {Article.query.count()}")
        print(f"   ‚Ä¢ Betting Odds: {BettingOdd.query.count()}")
        print(f"   ‚Ä¢ Matches: {Match.query.count()}")
        print("\nüåê Kh·ªüi ch·∫°y website b·∫±ng: python main.py")

if __name__ == '__main__':
    main()
